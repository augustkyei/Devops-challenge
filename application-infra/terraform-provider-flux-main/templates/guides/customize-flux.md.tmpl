---
subcategory: ""
page_title: "Customize Flux"
description: |-
  Customizing Flux past the exposed parameters.
---

# Customize Flux

The Flux datasources expose a set of parameters that can configure the controller deployment. These parameters include all of those
exposed by the `flux bootstrap` CLI command. There may be situations where these parameters are not enough and additional configuration
has to be done. This could be changing the resource requests or limits for a controller, adding annotations or labels, or modifying container settings.

When deploying Flux with the CLI the recommended solution is to [modify the Kustomization file](https://fluxcd.io/docs/installation/#customize-flux-manifests).
When using terraform to bootstrap flux, the `flux_sync` data source provides a `patch_names` argument and corresponding `patch_file_paths` output value that allow users to provide patches to the `kustomize.yaml` in the same manner.

This guide assumes that you have setup Flux with Terraform already. Follow the [GitHub guide](./github) for a quick example to get a Kubernetes cluster with Flux installed in it.

The following patch file, `psp-patch.yaml`,  will set PSP rules for all of the Flux deployments.

{{ tffile "examples/customize-flux/psp-patch.yaml" }}

The patch file can then be read into terraform using the `file` function (alternatively it could be declared directly in terraform using heredoc syntax)
and used as the `content` of a `github_repository_file`. The `kustomize.yaml` content will be generated by the `flux_sync` data source to include patch
files, using a `patchesStrategicMerge`.

Using the `patch_file_paths` output value of `sync_flux`, we can commit the content of each patch to its own file in git. This allows us to implement
small patches that do one thing, in line with the recommendation from the [kustomize docs](https://kubernetes.io/docs/tasks/manage-kubernetes-objects/kustomization/#customizing).


In the example configuration below, we load `psp-patch.yaml` from the local filesystem, as well as provide a second patch inline as a heredoc to annotate a service account.

{{ tffile "examples/customize-flux/main.tf" }}

The following `kustomize.yaml` will be generated by the`flux_sync` data source, where the names of the patch files
to include are generated from the `patch_names` argument. This is created in git by `github_repository_file.kustomize`.

```yaml
apiVersion: kustomize.config.k8s.io/v1beta1
kind: Kustomization
resources:
- gotk-sync.yaml
- gotk-components.yaml
patchesStrategicMerge:
- patch-sops.yaml
```
